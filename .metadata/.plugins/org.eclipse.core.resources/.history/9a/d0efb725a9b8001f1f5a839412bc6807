/* *****************************************************************
 * ILP9 - Implantation d'un langage de programmation.
 * by Christian.Queinnec@paracamplus.com
 * See http://mooc.paracamplus.com/ilp9
 * GPL version 3
 ***************************************************************** */
package com.paracamplus.ilp4.ilp4tme10;

import com.paracamplus.ilp1.interpreter.interfaces.EvaluationException;
import com.paracamplus.ilp4.interfaces.IASTclassDefinition;
import com.paracamplus.ilp4.interfaces.IASTprogram;
import com.paracamplus.ilp4.interpreter.interfaces.IClassEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.IGlobalVariableEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.ILexicalEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.IOperatorEnvironment;
import com.paracamplus.ilp2.interfaces.IASTfunctionDefinition;
import com.paracamplus.ilp3.interpreter.primitive.Throw.ThrownException;

public class Interpreter extends com.paracamplus.ilp4.interpreter.Interpreter
implements IASTvisitor<Object, ILexicalEnvironment, EvaluationException> 
{
    
	public Interpreter (IGlobalVariableEnvironment globalVariableEnvironment,
            IOperatorEnvironment operatorEnvironment,
            IClassEnvironment classEnvironment, 
            IGlobalVariableEnvironment finishedEnvironment) {
		super(globalVariableEnvironment, operatorEnvironment, classEnvironment);
		this.finishedEnvironment = finishedEnvironment;
	}

	private IGlobalVariableEnvironment finishedEnvironment;
  
    public Object visit(IASTexists iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        if(lexenv.isPresent(iast.getVariable())) {
        	return true;
        }
        else {
        	if(finishedEnvironment.getGlobalVariableValue(iast.getVariable().getName()) != null) {
        		return true;
        	}
        	else {
        		return false;
        	}
        }
    }
    
    public Object visit(IASTprogram iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
    	
        for ( IASTclassDefinition cd : iast.getClassDefinitions() ) {
            this.visit(cd, lexenv);
        }
        for ( IASTfunctionDefinition fd : iast.getFunctionDefinitions() ) {
            Object f = this.visit(fd, lexenv);
            String v = fd.getName();
            getGlobalVariableEnvironment().addGlobalVariableValue(v, f);
        }
        EnvironmentCheck checker = new EnvironmentCheck(globalVariableEnvironment, operatorEnvironment, classEnvironment);
        checker.visit(iast, lexenv);
        this.finishedEnvironment = checker.getEnvironment();
        try {
            return iast.getBody().accept(this, lexenv);
        } catch (ThrownException exc) {
            return exc.getThrownValue();
        } catch (Exception exc) {
            return exc;
        }
    }

	@Override
	public Object visit(IASTdefined iast, ILexicalEnvironment data) throws EvaluationException {
		if(data.isPresent(iast.getVariable())) {
        	return true;
        }
        else {
        	if(globalVariableEnvironment.getGlobalVariableValue(iast.getVariable().getName()) != null) {
        		System.out.println(globalVariableEnvironment.getGlobalVariableValue(iast.getVariable().getName());)
        		return true;
        	}
        	else {
        		return false;
        	}
        }
	}
   
}
