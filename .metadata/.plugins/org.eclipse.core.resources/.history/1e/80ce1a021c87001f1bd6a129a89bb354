package com.paracamplus.ilp2.ilp2tme4.parser.ilpml.met2;

import java.util.List;
import java.util.Vector;

import com.paracamplus.ilp1.interfaces.IASTalternative;
import com.paracamplus.ilp1.interfaces.IASTbinaryOperation;
import com.paracamplus.ilp1.interfaces.IASTblock;
import com.paracamplus.ilp1.interfaces.IASTblock.IASTbinding;
import com.paracamplus.ilp1.interfaces.IASTboolean;
import com.paracamplus.ilp1.interfaces.IASTexpression;
import com.paracamplus.ilp1.interfaces.IASTfloat;
import com.paracamplus.ilp1.interfaces.IASTinteger;
import com.paracamplus.ilp1.interfaces.IASTinvocation;
import com.paracamplus.ilp1.interfaces.IASToperator;
import com.paracamplus.ilp1.interfaces.IASTprogram;
import com.paracamplus.ilp1.interfaces.IASTsequence;
import com.paracamplus.ilp1.interfaces.IASTstring;
import com.paracamplus.ilp1.interfaces.IASTunaryOperation;
import com.paracamplus.ilp1.interfaces.IASTvariable;
import com.paracamplus.ilp1.interpreter.EmptyLexicalEnvironment;
import com.paracamplus.ilp1.interpreter.Function;
import com.paracamplus.ilp1.interpreter.interfaces.EvaluationException;
import com.paracamplus.ilp1.interpreter.interfaces.IGlobalVariableEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.ILexicalEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.IOperator;
import com.paracamplus.ilp1.interpreter.interfaces.IOperatorEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.Invocable;
import com.paracamplus.ilp2.interfaces.IASTassignment;
import com.paracamplus.ilp2.interfaces.IASTfunctionDefinition;
import com.paracamplus.ilp2.interfaces.IASTloop;
import com.paracamplus.ilp2.interfaces.IASTvisitor;

public class ASTvisitor extends com.paracamplus.ilp2.interpreter.Interpreter
    implements IASTvisitor<Object, ILexicalEnvironment, EvaluationException> {
        

        // 
        
        public ASTvisitor(IGlobalVariableEnvironment globalVariableEnvironment,
    			IOperatorEnvironment operatorEnvironment) {
    		super(globalVariableEnvironment, operatorEnvironment);
    	}

        @Override
    	public Object visit(com.paracamplus.ilp1.interfaces.IASTprogram iast, ILexicalEnvironment lexenv) throws EvaluationException  {
        	return visit((IASTprogram)iast, lexenv);
        }

    	public Object visit(IASTprogram iast, ILexicalEnvironment lexenv) 
                throws EvaluationException {
            for ( IASTfunctionDefinition fd : iast.getFunctionDefinitions() ) {
                Object f = this.visit(fd, lexenv);
                String v = fd.getName();
                getGlobalVariableEnvironment().addGlobalVariableValue(v, f);
            }
            try {
                return iast.getBody().accept(this, lexenv);
           } catch (Exception exc) {
                return exc;
            }
        }
       
        // 

                
        @Override
    	public Object visit(IASTassignment iast, ILexicalEnvironment lexenv) 
                throws EvaluationException {
            IASTvariable variable = iast.getVariable();
            Object value = iast.getExpression().accept(this, lexenv);
            try {
                lexenv.update(variable, value);
            } catch (EvaluationException exc) {
                getGlobalVariableEnvironment()
                    .updateGlobalVariableValue(variable.getName(), value);
            }
            return value;
        }


        
        public Invocable visit(IASTfunctionDefinition iast, ILexicalEnvironment lexenv) 
                throws EvaluationException {
            Invocable fun = new Function(iast.getVariables(),
                                         iast.getBody(),
                                         new EmptyLexicalEnvironment());
            return fun;
        }
        
        @Override
    	public Object visit(IASTinvocation iast, ILexicalEnvironment lexenv) 
                throws EvaluationException {
            Object function = iast.getFunction().accept(this, lexenv);
            if ( function instanceof Invocable ) {
                Invocable f = (Invocable)function;
                List<Object> args = new Vector<Object>();
                for ( IASTexpression arg : iast.getArguments() ) {
                    Object value = arg.accept(this, lexenv);
                    args.add(value);
                }
                return f.apply(this, args.toArray());
            } else {
                String msg = "Cannot apply " + function;
                throw new EvaluationException(msg);
            }
        }
        
        
        @Override
    	public Object visit(IASTloop iast, ILexicalEnvironment lexenv) 
                throws EvaluationException {
            while ( true ) {
                Object condition = iast.getCondition().accept(this, lexenv);
                if ( condition instanceof Boolean ) {
                    Boolean c = (Boolean) condition;
                    if ( ! c ) {
                        break;
                    }
                }
                iast.getBody().accept(this, lexenv);
            }
            return Boolean.FALSE;
        }

	@Override
	public Integer visit(IASTunless iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}
    /*
    protected IGlobalVariableEnvironment globalVariableEnvironment;
    protected IOperatorEnvironment operatorEnvironment;

    public IOperatorEnvironment getOperatorEnvironment() {
        return operatorEnvironment;
    }
    
    public IGlobalVariableEnvironment getGlobalVariableEnvironment() {
        return globalVariableEnvironment;
    }
    
    // 
    
    public Integer visit(IASTprogram iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        try {
            return iast.getBody().accept(this, lexenv);
        } catch (Exception exc) {
            return 0;
        }
    }
   
    // 
    
            
    @Override
	public Integer visit(IASTalternative iast, ILexicalEnvironment lexenv) 
        throws EvaluationException {
           	return iast.getCondition().accept(this, lexenv) + iast.getConsequence().accept(this, lexenv) + iast.getAlternant().accept(this, lexenv);
    }
    


    @Override
	public Integer visit(IASTunaryOperation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
//        Object operand = iast.getOperand().accept(this, lexenv);
//        IASToperator operator = iast.getOperator();
//        IOperator op = getOperatorEnvironment().getUnaryOperator(operator);
        return iast.getOperand().accept(this, lexenv);
    }
    
    @Override
	public Integer visit(IASTbinaryOperation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
//        Object leftOperand = iast.getLeftOperand().accept(this, lexenv);
//        Object rightOperand = iast.getRightOperand().accept(this, lexenv);
//        IASToperator operator = iast.getOperator();
//        IOperator op = getOperatorEnvironment().getBinaryOperator(operator);
        return iast.getLeftOperand().accept(this, lexenv) + iast.getRightOperand().accept(this, lexenv);
    }

    @Override
	public Integer visit(IASTsequence iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        IASTexpression[] expressions = iast.getExpressions();
        int lastValue = 0;
        for ( IASTexpression e : expressions ) {
            lastValue += e.accept(this, lexenv);
        }
        return lastValue;
    }
    
    @Override
	public Integer visit(IASTblock iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
    	int count = 0;
        for ( IASTbinding binding : iast.getBindings() ) {
            count += 
                    binding.getInitialisation().accept(this, lexenv);
        }
        return iast.getBody().accept(this, lexenv) + count;
    }

    @Override
	public Integer visit(IASTboolean iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTinteger iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTfloat iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTstring iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }

    @Override
	public Integer visit(IASTvariable iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
            return 0;
    }
    
    @Override
	public Integer visit(IASTinvocation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        int count = 0;
        for ( IASTexpression arg : iast.getArguments() ) {
            count += arg.accept(this, lexenv);
        }
        return count;
    }
    */
    
  
}
