package com.paracamplus.ilp2.ilp2tme4.parser.ilpml.met2;

import com.paracamplus.ilp1.interfaces.IASTalternative;
import com.paracamplus.ilp1.interfaces.IASTbinaryOperation;
import com.paracamplus.ilp1.interfaces.IASTblock;
import com.paracamplus.ilp1.interfaces.IASTboolean;
import com.paracamplus.ilp1.interfaces.IASTfloat;
import com.paracamplus.ilp1.interfaces.IASTinteger;
import com.paracamplus.ilp1.interfaces.IASTinvocation;
import com.paracamplus.ilp1.interfaces.IASTsequence;
import com.paracamplus.ilp1.interfaces.IASTstring;
import com.paracamplus.ilp1.interfaces.IASTunaryOperation;
import com.paracamplus.ilp1.interfaces.IASTvariable;
import com.paracamplus.ilp1.interpreter.interfaces.EvaluationException;
import com.paracamplus.ilp1.interpreter.interfaces.IGlobalVariableEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.ILexicalEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.IOperatorEnvironment;
import com.paracamplus.ilp2.interfaces.IASTassignment;
import com.paracamplus.ilp2.interfaces.IASTloop;

public class ASTvisitor
    implements IASTvisitor<Object, ILexicalEnvironment, EvaluationException> {
        //  
        public ASTvisitor(IGlobalVariableEnvironment globalVariableEnvironment,
    			IOperatorEnvironment operatorEnvironment) {
    		super();
    	}

    protected IASTfactory factory;
	@Override
	public Integer visit(IASTunless iast, ILexicalEnvironment data) throws EvaluationException {
		
		return null;
	}
    /*
    protected IGlobalVariableEnvironment globalVariableEnvironment;
    protected IOperatorEnvironment operatorEnvironment;

    public IOperatorEnvironment getOperatorEnvironment() {
        return operatorEnvironment;
    }
    
    public IGlobalVariableEnvironment getGlobalVariableEnvironment() {
        return globalVariableEnvironment;
    }


    @Override
	public Integer visit(IASTunaryOperation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
//        Object operand = iast.getOperand().accept(this, lexenv);
//        IASToperator operator = iast.getOperator();
//        IOperator op = getOperatorEnvironment().getUnaryOperator(operator);
        return iast.getOperand().accept(this, lexenv);
    }
    
    @Override
	public Integer visit(IASTbinaryOperation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
//        Object leftOperand = iast.getLeftOperand().accept(this, lexenv);
//        Object rightOperand = iast.getRightOperand().accept(this, lexenv);
//        IASToperator operator = iast.getOperator();
//        IOperator op = getOperatorEnvironment().getBinaryOperator(operator);
        return iast.getLeftOperand().accept(this, lexenv) + iast.getRightOperand().accept(this, lexenv);
    }

    @Override
	public Integer visit(IASTsequence iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        IASTexpression[] expressions = iast.getExpressions();
        int lastValue = 0;
        for ( IASTexpression e : expressions ) {
            lastValue += e.accept(this, lexenv);
        }
        return lastValue;
    }
    
    @Override
	public Integer visit(IASTblock iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
    	int count = 0;
        for ( IASTbinding binding : iast.getBindings() ) {
            count += 
                    binding.getInitialisation().accept(this, lexenv);
        }
        return iast.getBody().accept(this, lexenv) + count;
    }

    @Override
	public Integer visit(IASTboolean iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTinteger iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTfloat iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTstring iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }

    @Override
	public Integer visit(IASTvariable iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
            return 0;
    }
    
    @Override
	public Integer visit(IASTinvocation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        int count = 0;
        for ( IASTexpression arg : iast.getArguments() ) {
            count += arg.accept(this, lexenv);
        }
        return count;
    }
    */

	@Override
	public Object visit(IASTassignment iast, ILexicalEnvironment data) throws EvaluationException {
		
		return iast.accept(this, data);
	}

	@Override
	public Object visit(IASTloop iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	/*  @Override
	public Integer visit(IASTalternative iast, ILexicalEnvironment lexenv) 
        throws EvaluationException {
           	return iast.getCondition().accept(this, lexenv) + iast.getConsequence().accept(this, lexenv) + iast.getAlternant().accept(this, lexenv);
    }
    */
	@Override
	public Object visit(IASTalternative iast, ILexicalEnvironment data) throws EvaluationException {
		iast.getCondition().accept(this, lexenv) + iast.getConsequence().accept(this, lexenv) + iast.getAlternant().accept(this, lexenv);
		
		return factory.newAlternative;
	}

	@Override
	public Object visit(IASTbinaryOperation iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTblock iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTboolean iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTfloat iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTinteger iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTinvocation iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTsequence iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTstring iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTunaryOperation iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visit(IASTvariable iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}
    
  
}
