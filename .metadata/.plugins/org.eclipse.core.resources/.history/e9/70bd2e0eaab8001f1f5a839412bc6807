/* *****************************************************************
 * ILP9 - Implantation d'un langage de programmation.
 * by Christian.Queinnec@paracamplus.com
 * See http://mooc.paracamplus.com/ilp9
 * GPL version 3
 ***************************************************************** */
package com.paracamplus.ilp4.ilp4tme10;

import java.util.List;
import java.util.Vector;

import com.paracamplus.ilp1.interfaces.IASTexpression;
import com.paracamplus.ilp1.interfaces.IASTinvocation;
import com.paracamplus.ilp1.interfaces.IASTvariable;
import com.paracamplus.ilp1.interpreter.interfaces.EvaluationException;
import com.paracamplus.ilp4.interfaces.IASTclassDefinition;
import com.paracamplus.ilp4.interfaces.IASTfieldRead;
import com.paracamplus.ilp4.interfaces.IASTfieldWrite;
import com.paracamplus.ilp4.interfaces.IASTinstantiation;
import com.paracamplus.ilp4.interfaces.IASTmethodDefinition;
import com.paracamplus.ilp4.interfaces.IASTself;
import com.paracamplus.ilp4.interfaces.IASTsend;
import com.paracamplus.ilp4.interfaces.IASTsuper;
import com.paracamplus.ilp4.interpreter.ILPInstance;
import com.paracamplus.ilp4.interpreter.ILPMethod;
import com.paracamplus.ilp4.interpreter.interfaces.IClass;
import com.paracamplus.ilp4.interpreter.interfaces.IClassEnvironment;
import com.paracamplus.ilp4.interpreter.interfaces.IMethod;
import com.paracamplus.ilp4.interpreter.interfaces.ISuperCallInformation;
import com.paracamplus.ilp1.interpreter.interfaces.IGlobalVariableEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.ILexicalEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.IOperatorEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.Invocable;

public class EnvironmentCheck extends com.paracamplus.ilp4.interpreter.Interpreter
implements IASTvisitor<Object, ILexicalEnvironment, EvaluationException> 
{
    
	public EnvironmentCheck (IGlobalVariableEnvironment globalVariableEnvironment,
            IOperatorEnvironment operatorEnvironment,
            IClassEnvironment classEnvironment) {
		super(globalVariableEnvironment, operatorEnvironment, classEnvironment);
	}

	public IGlobalVariableEnvironment getEnvironment()  {
		return this.globalVariableEnvironment;
	}
  
    public Object visit(IASTexists iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        	return true;
        
    }
    
    @Override
   	public Object visit(IASTinvocation iast, ILexicalEnvironment lexenv) 
               throws EvaluationException {
           Object function = iast.getFunction().accept(this, lexenv);
           if ( function instanceof Invocable ) {
               Invocable f = (Invocable)function;
               List<Object> args = new Vector<Object>();
               for ( IASTexpression arg : iast.getArguments() ) {
                   Object value = arg.accept(this, lexenv);
                   args.add(value);
               }
               return 1;
           } else {
               String msg = "Cannot apply " + function;
               throw new EvaluationException(msg);
           }
       }
    
 // Class-related methods 
    @Override
    public IClass visit(IASTclassDefinition iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        List<IMethod> methods = new Vector<>();
        for ( IASTmethodDefinition md : iast.getProperMethodDefinitions() ) {
            IMethod m = visit(md, lexenv);
        }
        return null;
    }
    
    @Override
    public IMethod visit(IASTmethodDefinition iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        IMethod method = new ILPMethod(
                iast.getMethodName(),
                iast.getDefiningClassName(),
                iast.getVariables(),
                iast.getBody() );
        return null;
    }

    @Override
	public Object visit(IASTinstantiation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        IClass clazz = getClassEnvironment().getILPClass(iast.getClassName());
        List<Object> args = new Vector<Object>();
        for ( IASTexpression arg : iast.getArguments() ) {
            Object value = arg.accept(this, lexenv);
            args.add(value);
        }
        return null;
    }    
     
    @Override
	public Object visit(IASTfieldRead iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        String fieldName = iast.getFieldName();
        Object target = iast.getTarget().accept(this, lexenv);
        if ( target instanceof ILPInstance ) {
            return null;
        } else {
            String msg = "Not an ILP instance " + target;
            throw new EvaluationException(msg);
        }
    }
    
    @Override
	public Object visit(IASTfieldWrite iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        String fieldName = iast.getFieldName();
        Object target = iast.getTarget().accept(this, lexenv);
        Object value = iast.getValue().accept(this, lexenv);
        if ( target instanceof ILPInstance ) {
            return null;
        } else {
            String msg = "Not an ILP instance " + target;
            throw new EvaluationException(msg);
        }
    }
    
    @Override
	public Object visit(IASTsend iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        String message = iast.getMethodName();
        Object receiver = iast.getReceiver().accept(this, lexenv);
        List<Object> arguments = new Vector<Object>();
        for ( IASTexpression arg : iast.getArguments() ) {
            Object value = arg.accept(this, lexenv);
            arguments.add(value);
        }
        if ( receiver instanceof ILPInstance ) {
            return null;
        } else {
            String msg = "Not an ILP instance " + receiver;
            throw new EvaluationException(msg);
        }
    }
    
    @Override
	public Object visit(IASTself iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return lexenv.getValue(iast);
    }
    
     @Override
	public Object visit(IASTsuper iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
         ISuperCallInformation isci = 
        		 ((com.paracamplus.ilp4.interpreter.interfaces.ISuperCallLexicalEnvironment) lexenv).getSuperCallInformation();
         IMethod supermethod = isci.getSuperMethod();
         return null;
    }
     
     @Override
 	public Object visit(IASTvariable iast, ILexicalEnvironment lexenv) 
             throws EvaluationException {
         try {
             return lexenv.getValue(iast);
         } catch (EvaluationException exc) {
             if(globalVariableEnvironment
                     .getGlobalVariableValue(iast.getName()) == null) {
            	 globalVariableEnvironment.addGlobalVariableValue(iast.getName(), 1);
             }
             return 1;
         }
     }

     @Override
 	public Object visit(IASTdefined iast, ILexicalEnvironment data) throws EvaluationException {
 		return true;
 	}
  
}
