package com.paracamplus.ilp2.ilp2tme4.parser.ilpml.met2;

import com.paracamplus.ilp1.interpreter.interfaces.EvaluationException;
import com.paracamplus.ilp1.interpreter.interfaces.IGlobalVariableEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.ILexicalEnvironment;
import com.paracamplus.ilp1.interpreter.interfaces.IOperatorEnvironment;

public class ASTvisitor extends com.paracamplus.ilp2.interpreter.Interpreter
    implements IASTvisitor<Object, ILexicalEnvironment, EvaluationException> {
        

        // 
        
        public ASTvisitor(IGlobalVariableEnvironment globalVariableEnvironment,
    			IOperatorEnvironment operatorEnvironment) {
    		super(globalVariableEnvironment, operatorEnvironment);
    	}

	@Override
	public Integer visit(IASTunless iast, ILexicalEnvironment data) throws EvaluationException {
		// TODO Auto-generated method stub
		return null;
	}
    /*
    protected IGlobalVariableEnvironment globalVariableEnvironment;
    protected IOperatorEnvironment operatorEnvironment;

    public IOperatorEnvironment getOperatorEnvironment() {
        return operatorEnvironment;
    }
    
    public IGlobalVariableEnvironment getGlobalVariableEnvironment() {
        return globalVariableEnvironment;
    }
    
    // 
    
    public Integer visit(IASTprogram iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        try {
            return iast.getBody().accept(this, lexenv);
        } catch (Exception exc) {
            return 0;
        }
    }
   
    // 
    
            
    @Override
	public Integer visit(IASTalternative iast, ILexicalEnvironment lexenv) 
        throws EvaluationException {
           	return iast.getCondition().accept(this, lexenv) + iast.getConsequence().accept(this, lexenv) + iast.getAlternant().accept(this, lexenv);
    }
    


    @Override
	public Integer visit(IASTunaryOperation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
//        Object operand = iast.getOperand().accept(this, lexenv);
//        IASToperator operator = iast.getOperator();
//        IOperator op = getOperatorEnvironment().getUnaryOperator(operator);
        return iast.getOperand().accept(this, lexenv);
    }
    
    @Override
	public Integer visit(IASTbinaryOperation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
//        Object leftOperand = iast.getLeftOperand().accept(this, lexenv);
//        Object rightOperand = iast.getRightOperand().accept(this, lexenv);
//        IASToperator operator = iast.getOperator();
//        IOperator op = getOperatorEnvironment().getBinaryOperator(operator);
        return iast.getLeftOperand().accept(this, lexenv) + iast.getRightOperand().accept(this, lexenv);
    }

    @Override
	public Integer visit(IASTsequence iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        IASTexpression[] expressions = iast.getExpressions();
        int lastValue = 0;
        for ( IASTexpression e : expressions ) {
            lastValue += e.accept(this, lexenv);
        }
        return lastValue;
    }
    
    @Override
	public Integer visit(IASTblock iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
    	int count = 0;
        for ( IASTbinding binding : iast.getBindings() ) {
            count += 
                    binding.getInitialisation().accept(this, lexenv);
        }
        return iast.getBody().accept(this, lexenv) + count;
    }

    @Override
	public Integer visit(IASTboolean iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTinteger iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTfloat iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }
    
    @Override
	public Integer visit(IASTstring iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        return 1;
    }

    @Override
	public Integer visit(IASTvariable iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
            return 0;
    }
    
    @Override
	public Integer visit(IASTinvocation iast, ILexicalEnvironment lexenv) 
            throws EvaluationException {
        int count = 0;
        for ( IASTexpression arg : iast.getArguments() ) {
            count += arg.accept(this, lexenv);
        }
        return count;
    }
    */
    
  
}
